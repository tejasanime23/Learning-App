{
  "next_id": 28,
  "items": {
    "1": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "2": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "3": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "4": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "5": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "6": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "7": {
      "text": "How to Download Our Manuals in PDF There is an easy way to save a PDF copy of our manual s. To get started, visit the Manuals and Guides and select the manual you wish to download. Follow the steps below to save a PDF version: 1. Click “ Print Manual.” 2. On ce the page loads with the print version of the manual you selected, click “ Print.” 3. Ch rome only: A Print Preview box will appear. U nder “Destination,” click “ Change. ” 4. S elect “Save as PDF ” or “Microsoft Print to PDF.” Chrome: In ternet Explorer: Firefox : 5. C lick “ Save,” “Print,” or “OK.” Chrome: In ternet Explorer: F irefox: 6. On the “S ave As” screen, s elect the location where you want to save the file. 7. T ype a file name for this document. (You may either save it as the default file name or enter a file name to your liking. ) 8. C lick “ Save.”",
      "source": "unknown",
      "file": "test.pdf"
    },
    "8": {
      "text": "Department of CSE 12.1 Arrays Objectives •T o define an array, initialize an array and refer to individual elements of an array. •T o define symbolic constants. •T o define and manipulate multiple -subscripted arrays. 2 Department of CSE Agenda •Introducing Arrays •Declaring Array Variables •Initializing Arrays •Accessing Array Elements •Copying Arrays •Multidimensional Arrays 3 Department of CSE Introduction  An array is a collection of elements of the same type that are referenced by a common name .  Compared to the basic data type ( int, float & char) it is an aggregate or derived data type.  All the elements of an array occupy a set of contiguous memory locations.  Why need to use array type? ….. Consider the following issue: 4 Department of CSE\"We have a list of 1000 students' marks of an integer type. If using the basic data type ( int), we will declare something like the following…\" intstudMark0, studMark1, studMark2, ..., studMark999; Introduction cont… Declaration part by using normal variable declaration intmain(void) { intstudMark1, studMark2, studMark3, studMark4, … , …, studMark998, stuMark999, studMark1000; … … return 0; } By using an array, one can declare like this, intstudMark [1000]; This will reserve 1000 contiguous memory locations for storing the students‟ marks. 5 Department of CSE Introduction cont… •Graphically, this can be depicted as 6 Department of CSE  So… array has simplified our declaration and of course, manipulation of the data. One Dimensional Array: Declaration Dimension refers to the array's size , which is how big the array is. A single or one dimensional array declaration has the following form, array_element_data_type array_name [array_size ]; Here, array_element_data_type define the base type of the array, which is the type of each element in the array. array_name is any valid C identifier name that obeys the same rule for the identifier naming. array_size defines how many elements the array will hold. 7 Department of CSE For example, to declare an array of 30 characters, that construct a people name, we could declare, char cName [30]; In this statement, the array character can store up to 30 characters with the first character occupying location cName [0]and the last character occupying cName [29]. Note that the index runs from 0to 29.In C, an index always starts from 0and ends with array's (size -1). So, take note the difference between the array size and subscript/index terms. 8 Department of CSE Examples of the one -dimensional array declarations, int xNum [20], yNum [50]; float fPrice [10], fYield ; char chLetter [70]; The first example declares two arrays named xNum and yNum of type int.Array xNum can store up to 20 integer numbers while yNum can store up to 50 numbers. The second line declares the array fPrice of type float.It can store up to 10 floating -point values. fYield is basic variable which shows array type can be declared together with basic type provided the type is similar. The third line declares the array chLetter of type char. It",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "9": {
      "text": "chLetter [70]; The first example declares two arrays named xNum and yNum of type int.Array xNum can store up to 20 integer numbers while yNum can store up to 50 numbers. The second line declares the array fPrice of type float.It can store up to 10 floating -point values. fYield is basic variable which shows array type can be declared together with basic type provided the type is similar. The third line declares the array chLetter of type char. It can store a string up to 69 characters. Why 69 instead of 70? Remember, a string has a null terminating character ( \\0) at the end , so we must reserve for it. 9 Department of CSE 10 Department of CSE Starting from a given memory location, the successive array elements are allocated space in consecutive memory locations. One Dimensional Array: Initialization Method 1 --Initialization at the time of declaration  Giving initial values to an array.  Initialization of an array may take the following form, type array_name [size] = { a_list_of_value };  For example: int idNum [7] = { 1, 2, 3, 4, 5, 6, 7 }; float fFloatNum [5] = { 5.6, 5.7, 5.8, 5.9, 6.1 }; char chVowel [6] = { 'a', 'e', ' i', 'o', 'u', ' \\0'};  The first line declares an integer array idNum and it immediately assigns the values 1, 2, 3, ..., 7 to idNum [0], idNum [1], idNum [2],..., idNum [6]respectively.  The second line assigns the values 5.6 to fFloatNum [0],5.7tofFloatNum [1], and so on.  Similarly the third line assigns the characters ' a' to chVowel [0], 'e' to chVowel [1], and so on.Note again, for characters we must use the single apostrophe/quote (') to enclose them.  Also, the last character in chVowel is NULL character (' \\0'). 11 Department of CSE Initialization of an array of type char for holding strings may take the following form, char array_name [size] = \" string_lateral_constant \"; For example, the array chVowel in the previous example could have been written more compactly as follows, char chVowel [6] = \" aeiou \"; When the value assigned to a character array is a string (which must be enclosed in double quotes), the compiler automatically supplies the NULL character but we still have to reserve one extra place for the NULL . For unsized array (variable sized), we can declare as follow , char chName [ ] = \"Mr. Dracula\"; C compiler automatically creates an array which is big enough to hold all the initializer . 12 Department of CSE •T o set every element to same value intn[ 5 ] = { 0 }; •If array size omitted, initializers determine size intn[] = { 1, 2, 3, 4, 5 }; •5 initializers , therefore 5 element array intn[ 5 ] = { 1, 2, 3, 4, 5 }; •If not enough initializers , rightmost elements 0 •If too many syntax error 13 Department of CSEDifferent cases: Initialization One Dimensional Array:",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "10": {
      "text": "hold all the initializer . 12 Department of CSE •T o set every element to same value intn[ 5 ] = { 0 }; •If array size omitted, initializers determine size intn[] = { 1, 2, 3, 4, 5 }; •5 initializers , therefore 5 element array intn[ 5 ] = { 1, 2, 3, 4, 5 }; •If not enough initializers , rightmost elements 0 •If too many syntax error 13 Department of CSEDifferent cases: Initialization One Dimensional Array: Initialization Method 2 –Set the values using loop intmain() { intn[ 10]; // n is an array of 10 integers // initialize elements of array n to 0 for( inti= 0; i< 10; i++ ) n[ i] = 0; // set element at location ito 0 } 14 Department of CSE Array size •Can be specified with constant variable ( const ) constintsize = 20; •Constants cannot be changed •Constants must be initialized when declared •Also called named constants or read -only variables •The sizeof operator can determine the size of an array (in bytes). inta[10]; sizeof (a)= 40 (assuming each integer requires 4 bytes) 15 Department of CSE One Dimensional Array: Accessing array elements Individual elements of the array can be accessed by using the array name followed by the element subscript enclosed in square brackets as follows: array_name [subscript ] Notice that the array elements start from 0, not 1, so the first element of the a array is a[0] and the last element is a[size -1] where size is the number of element in the a array. The following program demonstrates how to access elements of an array: #include < stdio.h > intmain() { const intSIZE = 5; inta[SIZE], i; for(i= 0; i< SIZE; i++) { a[i] = i; printf (\"a[%d] = %d \\n\",i,a [i]); } } 16 Department of CSE One Dimensional Array: Copying Arrays Can you copy array using a syntax like this? list = myList ; This is not allowed in C. You have to copy individual elements from one array to the other as follows: for(inti= 0; i< ARRAY_SIZE; i++) { list[i] = myList [i]; } 17 Department of CSE Rules to be followed when using arrays •The data type can be any valid data type such as int, float, char, etc. [structure or union –Will be dealt in later chapter]. •All elements of an array must always be of the same data type •The name of an array must follow naming rules of variables . •The size of the array must be zero or a constant positive integer. •The array index must evaluate to an integer between 0 and n -1 where n is the number of elements in the array. 18 Department of CSE Don‟t Do‟s You cannot • use = to assign one array variable to another a = b; /* a and b are arrays */ • use == to directly compare array variables if (a = = b) ........... • directly scanf or printf arrays printf (“......”, a);",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "11": {
      "text": "zero or a constant positive integer. •The array index must evaluate to an integer between 0 and n -1 where n is the number of elements in the array. 18 Department of CSE Don‟t Do‟s You cannot • use = to assign one array variable to another a = b; /* a and b are arrays */ • use == to directly compare array variables if (a = = b) ........... • directly scanf or printf arrays printf (“......”, a); 19 Department of CSE Illustrations Summing Elements in an array Use a variable named total to store the sum. Initially total is 0. Add each element in the array to total using a loop like this: double total = 0; for(inti= 0; i< ARRAY_SIZE; i++) { total += myList [i]; } 20 Department of CSE Finding Maximum in an array Use a variable named max to store the largest element. Initially max is myList [0]. T o find the largest element in the array myList , compare each element in myList with max, update max if the element is greater than max. double max = myList [0]; for(inti= 1; i< ARRAY_SIZE; i++) { if(myList [i] > max) max = myList [i]; } 21 Department of CSE Finding index of the largest element in the array double max = myList [0]; intindexOfMax = 0; for(inti= 1; i< ARRAY_SIZE; i++) { if(myList [i] > max) { max = myList [i]; indexOfMax = i; } } 22 Department of CSE Shifting Elements double temp = myList [0]; // Retain the first element // Shift elements left for(inti= 1; i< myList.length ; i++) { myList [i-1] = myList [i]; } // Move the first element to fill in the last position myList [myList.length -1] = temp; 23 Department of CSE Try it Yourself -Predict the output 1. #include < stdio.h > intmain() { intarr[5]; // Assume that base address of arris 2000 and size of integer // is 32 bit arr++; printf (\"%u\", arr); return 0; } (A) 2002 (B) 2004 (C) 2020 (D) lvalue required 24 Department of CSE Try it Yourself -Predict the output 2. What will be the output of the program ? #include< stdio.h > intmain() { inta[5] = {5, 1, 15, 20, 25}; inti, j, m; i= ++a[1]; j = a[1]++; m = a[ i++]; printf (\"%d, %d, %d\", i, j, m); return 0; } A. 2, 1, 15 B. 1, 2, 5 C. 3, 2, 15 D. 2, 3, 20 25 Department of CSE Try it Yourself -Predict the output 3. What is the output of the following program? intmain() { inti; intarr[5] = {0}; for (i= 0; i<= 5; i++) printf (\"%d \", arr[i]); return 0; } A. Compiler Error: Array index out of bound. B. The always prints 0 five times followed by garbage value C. The program always crashes. D. The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 26 Department of CSE Answers ---Predict",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "12": {
      "text": "the output 3. What is the output of the following program? intmain() { inti; intarr[5] = {0}; for (i= 0; i<= 5; i++) printf (\"%d \", arr[i]); return 0; } A. Compiler Error: Array index out of bound. B. The always prints 0 five times followed by garbage value C. The program always crashes. D. The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 26 Department of CSE Answers ---Predict the output 1. D) lvalue required Array name in C is implemented by a constant pointer. It is not possible to apply increment and decrement on constant types. 2. C) 3, 2, 15 Step 1 : inta[5] = {5, 1, 15, 20, 25}; The variable arris declared as an integer array with a size of 5 and it is initialized to a[0] = 5 , a[1] = 1 , a[2] = 15 , a[3] = 20 , a[4] = 25 . Step 2 : inti, j, m; The variable i,j,m are declared as an integer type. Step 3 : i= ++a[1]; becomes i= ++1; Hence i= 2and a[1] = 2 Step 4 : j = a[1]++; becomes j = 2++; Hence j = 2 and a[1] = 3 . Step 5 : m = a[ i++]; becomes m = a[2]; Hence m = 15 and iis incremented by 1( i++ means 2++ so i=3) Step 6 : printf (\"%d, %d, %d\", i, j, m); It prints the value of the variables i, j, m Hence the output of the program is 3, 2, 15 3. D)The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 27 Department of CSE Try it Yourself –Code debugging #include < stdio.h > #define MAXSIZE 10 void main() { intarray[MAXSIZE]; inti, num, negative_sum = 0; printf (\"Enter the value of N \\n\"); scanf (\"%d\", &num); printf (\"Enter %d numbers \\n\", num); for (i= 0; i< num; i++) { scanf (\"%d\", array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 28 Department of CSE Answers –Code Debugging #include < stdio.h > #define MAXSIZE 10 void main() { intarray[MAXSIZE]; inti, num, negative_sum = 0; printf (\"Enter the value of N \\n\"); scanf (\"%d\", &num); printf (\"Enter %d numbers \\n\", num); for (i= 0; i< num; i++) { scanf (\"%d\", &array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 29 Department of CSE Try it Yourself -Simple word problems To Print the Alternate Elements in an Array Array -NH- WP3.c Find 2 Elements in the Array such that Difference between them is Largest Array -NH-WP1.c To Sort",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "13": {
      "text": "scanf (\"%d\", &array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 29 Department of CSE Try it Yourself -Simple word problems To Print the Alternate Elements in an Array Array -NH- WP3.c Find 2 Elements in the Array such that Difference between them is Largest Array -NH-WP1.c To Sort the Array in an Ascending Order Array -NH-WP2.c 30 Department of CSE Multidimensional Arrays •C also allows an array to have more than one dimension. 31 Department of CSEFor example, a two -dimensional array consists of a certain number of rows and columns: constintNUMROWS = 3 ; constintNUMCOLS = 7 ; intArray[NUMROWS][NUMCOLS]; Array[2][5] 3rdvalue in 6thcolumn Array[0][4] 1stvalue in 5thcolumn The declaration must specify the number of rows and the number of columns, and both must be constants.0 1 2 3 4 5 6 0 418 9 3 -4 6 0 1 12 45 74 15 0 98 0 284 87 75 67 81 85 79 Starting from a given memory location, the elements are stored row -wise in consecutive memory locations. x: starting address of the array in memory c: number of columns k: number of bytes allocated per array element a[i][j] is allocated memory location at address x + ( i* c + j) * k 32 Department of CSE Multi Dimensional Array -Initialization Method 1 --Initialization at the time of declaration intArray1 [2][3] ={{1, 2, 3 },{4, 5, 6 }}; intArray2 [2][3] = { 1, 2, 3, 4, 5 }; intArray3 [2][3] = { {1, 2} , {4 } }; Rows of Array1: 1 2 34 5 6 Rows of Array2: 1 2 34 5 0 Rows of Array3: 1 2 04 0 0 33 Department of CSE Multi Dimensional Array -Initialization Method 2 –Setting values using loop (nested loop) intmain() { const intNUMROW = 3; const intNUMCOL = 7; intArray1[NUMROW][NUMCOL]; for (introw = 0; row < NUMROW; row++) { for (intcol= 0; col< NUMCOL; col++) { scanf (“%d”,&Array1[row][ col]; } } 34 Department of CSE Multidimensional Array –Accessing Elements 35 Department of CSE 0 1 2 3 4 0 7 0 1 2 3 4 1 2 3 4 0 1 2 3 4 matrix[2][1] = 7; matrix = new int[5][5]; 3 7 0 1 2 0 1 2 int[][] array = { {1, 2, 3}, {4, 5, 6 }, {7, 8, 9}, {10, 11, 12} }; 1 2 3 4 5 6 8 9 10 11 12 Multidimensional Array -Illustrations To add two matrix entered by the user and print it. #include< stdio.h > void main() { inta[3][3],b[3][3],c[3][3]; inti,j; printf (“enter the elements in both the array:”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&b [i][j]); } } for(i=0 ; i<3 ;",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "14": {
      "text": "}; 1 2 3 4 5 6 8 9 10 11 12 Multidimensional Array -Illustrations To add two matrix entered by the user and print it. #include< stdio.h > void main() { inta[3][3],b[3][3],c[3][3]; inti,j; printf (“enter the elements in both the array:”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&b [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { c[i][j]=a[ i][j]+b[ i][j]; printf (“%d”,c[i][j]); } printf (“n”); } } 36 Department of CSE Multidimensional Array -Illustrations To input a matrix and print its transpose. #include< stdio.h > #include< conio.h > void main() { inta[3][3],b[3][3]; inti,j; clrscr (); printf (“enter the elements in the array”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(j=0 ; i<3 ; i++) { for(i=0 ; j<3 ; j++) { printf (“%2d”,&b[j][ i]); } } getch (); } 37 Department of CSE Try it Yourself -Predict the output 1. #include < stdio.h > intmain() { inta[][] = {{1,2},{3,4}}; inti, j; for (i= 0; i< 2; i++) for (j = 0; j < 2; j++) printf (\"%d \", a[ i][j]); return 0; } A 1 2 3 4 B Compiler Error in line \" inta[][] = {{1,2},{3,4}};\" C 4 garbage values D 4 3 2 1 38 Department of CSE Try it Yourself -Predict the output 2. Consider the following declaration of a „two -dimensional array in C: char a[100][100]; Assuming that the main memory is byte -addressable and that the array is stored starting from memory address 0, the address of a[40][50] is…..? A. 4040 B. 4050 C. 5040 D. 5050 39 Department of CSE Answers –Predict the Output 1.Answer: (B) There is compilation error in the declaration inta[][] = {{1,2},{3,4}}; Except the first dimension, every other dimension must be specified. intarr[] = {5, 6, 7, 8} //valid intarr[][5] = {}; //valid intarr[][] = {}; //invalid intarr[][10][5] = {}; //valid intarr[][][5] = {}; //invalid 40 Department of CSE Answers –Predict the Output 2. Answer: (B) Address of a[40][50] = Base address + 40*100* element_size + 50*element_size = 0 + 4000*1 + 50*1 = 4050 41 Department of CSE Try it Yourself -Simple word problems To Check if a given Matrix is an Identity Matrix MDArray - NH-WP!.c To Calculate the Sum of the Elements of each Row & Column MDArray -NH-WP2.c 42 Department of CSE Common Programming Errors •It is important to note the difference between the “seventh element of the array” and “array element seven.” Because array subscripts begin at 0, the “seventh element of the array” has a subscript of 6, while “array element seven” has a subscript of 7 and is actually the eighth element of the array. This is a source of “ off-by-one” errors. •Forgetting to initialize the elements of an array whose elements should be initialized. •Providing more initializers in an array",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "15": {
      "text": "•It is important to note the difference between the “seventh element of the array” and “array element seven.” Because array subscripts begin at 0, the “seventh element of the array” has a subscript of 6, while “array element seven” has a subscript of 7 and is actually the eighth element of the array. This is a source of “ off-by-one” errors. •Forgetting to initialize the elements of an array whose elements should be initialized. •Providing more initializers in an array initializer list than there are elements in the array is a syntax error. •Ending a #define preprocessor directive with a semicolon . Remember that preprocessor directives are not C statements. 43 Department of CSE •Assigning a value to a symbolic constant in an executable statement is a syntax error. A symbolic constant is not a variable. No space is reserved for it by the compiler as with variables that hold values at execution time. •Not providing scanf with a character array large enough to store a string typed at the keyboard can result in destruction of data in a program and other runtime errors. This can also make a system susceptible to worm and virus attacks. •Referencing a double -subscripted array element as a[x,y] instead of a[x][y]. 44 Department of CSE Summary •The ability to use a single name to represent a collection of items and refer to an item by specifying the item number enables us to develop concise and efficient programs. •C allows arrays of more than one dimensions. •Exact limit is determined by the compiler 45 Department of CSE",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "16": {
      "text": "Department of CSE 12.1 Arrays Objectives •T o define an array, initialize an array and refer to individual elements of an array. •T o define symbolic constants. •T o define and manipulate multiple -subscripted arrays. 2 Department of CSE Agenda •Introducing Arrays •Declaring Array Variables •Initializing Arrays •Accessing Array Elements •Copying Arrays •Multidimensional Arrays 3 Department of CSE Introduction  An array is a collection of elements of the same type that are referenced by a common name .  Compared to the basic data type ( int, float & char) it is an aggregate or derived data type.  All the elements of an array occupy a set of contiguous memory locations.  Why need to use array type? ….. Consider the following issue: 4 Department of CSE\"We have a list of 1000 students' marks of an integer type. If using the basic data type ( int), we will declare something like the following…\" intstudMark0, studMark1, studMark2, ..., studMark999; Introduction cont… Declaration part by using normal variable declaration intmain(void) { intstudMark1, studMark2, studMark3, studMark4, … , …, studMark998, stuMark999, studMark1000; … … return 0; } By using an array, one can declare like this, intstudMark [1000]; This will reserve 1000 contiguous memory locations for storing the students‟ marks. 5 Department of CSE Introduction cont… •Graphically, this can be depicted as 6 Department of CSE  So… array has simplified our declaration and of course, manipulation of the data. One Dimensional Array: Declaration Dimension refers to the array's size , which is how big the array is. A single or one dimensional array declaration has the following form, array_element_data_type array_name [array_size ]; Here, array_element_data_type define the base type of the array, which is the type of each element in the array. array_name is any valid C identifier name that obeys the same rule for the identifier naming. array_size defines how many elements the array will hold. 7 Department of CSE For example, to declare an array of 30 characters, that construct a people name, we could declare, char cName [30]; In this statement, the array character can store up to 30 characters with the first character occupying location cName [0]and the last character occupying cName [29]. Note that the index runs from 0to 29.In C, an index always starts from 0and ends with array's (size -1). So, take note the difference between the array size and subscript/index terms. 8 Department of CSE Examples of the one -dimensional array declarations, int xNum [20], yNum [50]; float fPrice [10], fYield ; char chLetter [70]; The first example declares two arrays named xNum and yNum of type int.Array xNum can store up to 20 integer numbers while yNum can store up to 50 numbers. The second line declares the array fPrice of type float.It can store up to 10 floating -point values. fYield is basic variable which shows array type can be declared together with basic type provided the type is similar. The third line declares the array chLetter of type char. It",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "17": {
      "text": "chLetter [70]; The first example declares two arrays named xNum and yNum of type int.Array xNum can store up to 20 integer numbers while yNum can store up to 50 numbers. The second line declares the array fPrice of type float.It can store up to 10 floating -point values. fYield is basic variable which shows array type can be declared together with basic type provided the type is similar. The third line declares the array chLetter of type char. It can store a string up to 69 characters. Why 69 instead of 70? Remember, a string has a null terminating character ( \\0) at the end , so we must reserve for it. 9 Department of CSE 10 Department of CSE Starting from a given memory location, the successive array elements are allocated space in consecutive memory locations. One Dimensional Array: Initialization Method 1 --Initialization at the time of declaration  Giving initial values to an array.  Initialization of an array may take the following form, type array_name [size] = { a_list_of_value };  For example: int idNum [7] = { 1, 2, 3, 4, 5, 6, 7 }; float fFloatNum [5] = { 5.6, 5.7, 5.8, 5.9, 6.1 }; char chVowel [6] = { 'a', 'e', ' i', 'o', 'u', ' \\0'};  The first line declares an integer array idNum and it immediately assigns the values 1, 2, 3, ..., 7 to idNum [0], idNum [1], idNum [2],..., idNum [6]respectively.  The second line assigns the values 5.6 to fFloatNum [0],5.7tofFloatNum [1], and so on.  Similarly the third line assigns the characters ' a' to chVowel [0], 'e' to chVowel [1], and so on.Note again, for characters we must use the single apostrophe/quote (') to enclose them.  Also, the last character in chVowel is NULL character (' \\0'). 11 Department of CSE Initialization of an array of type char for holding strings may take the following form, char array_name [size] = \" string_lateral_constant \"; For example, the array chVowel in the previous example could have been written more compactly as follows, char chVowel [6] = \" aeiou \"; When the value assigned to a character array is a string (which must be enclosed in double quotes), the compiler automatically supplies the NULL character but we still have to reserve one extra place for the NULL . For unsized array (variable sized), we can declare as follow , char chName [ ] = \"Mr. Dracula\"; C compiler automatically creates an array which is big enough to hold all the initializer . 12 Department of CSE •T o set every element to same value intn[ 5 ] = { 0 }; •If array size omitted, initializers determine size intn[] = { 1, 2, 3, 4, 5 }; •5 initializers , therefore 5 element array intn[ 5 ] = { 1, 2, 3, 4, 5 }; •If not enough initializers , rightmost elements 0 •If too many syntax error 13 Department of CSEDifferent cases: Initialization One Dimensional Array:",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "18": {
      "text": "hold all the initializer . 12 Department of CSE •T o set every element to same value intn[ 5 ] = { 0 }; •If array size omitted, initializers determine size intn[] = { 1, 2, 3, 4, 5 }; •5 initializers , therefore 5 element array intn[ 5 ] = { 1, 2, 3, 4, 5 }; •If not enough initializers , rightmost elements 0 •If too many syntax error 13 Department of CSEDifferent cases: Initialization One Dimensional Array: Initialization Method 2 –Set the values using loop intmain() { intn[ 10]; // n is an array of 10 integers // initialize elements of array n to 0 for( inti= 0; i< 10; i++ ) n[ i] = 0; // set element at location ito 0 } 14 Department of CSE Array size •Can be specified with constant variable ( const ) constintsize = 20; •Constants cannot be changed •Constants must be initialized when declared •Also called named constants or read -only variables •The sizeof operator can determine the size of an array (in bytes). inta[10]; sizeof (a)= 40 (assuming each integer requires 4 bytes) 15 Department of CSE One Dimensional Array: Accessing array elements Individual elements of the array can be accessed by using the array name followed by the element subscript enclosed in square brackets as follows: array_name [subscript ] Notice that the array elements start from 0, not 1, so the first element of the a array is a[0] and the last element is a[size -1] where size is the number of element in the a array. The following program demonstrates how to access elements of an array: #include < stdio.h > intmain() { const intSIZE = 5; inta[SIZE], i; for(i= 0; i< SIZE; i++) { a[i] = i; printf (\"a[%d] = %d \\n\",i,a [i]); } } 16 Department of CSE One Dimensional Array: Copying Arrays Can you copy array using a syntax like this? list = myList ; This is not allowed in C. You have to copy individual elements from one array to the other as follows: for(inti= 0; i< ARRAY_SIZE; i++) { list[i] = myList [i]; } 17 Department of CSE Rules to be followed when using arrays •The data type can be any valid data type such as int, float, char, etc. [structure or union –Will be dealt in later chapter]. •All elements of an array must always be of the same data type •The name of an array must follow naming rules of variables . •The size of the array must be zero or a constant positive integer. •The array index must evaluate to an integer between 0 and n -1 where n is the number of elements in the array. 18 Department of CSE Don‟t Do‟s You cannot • use = to assign one array variable to another a = b; /* a and b are arrays */ • use == to directly compare array variables if (a = = b) ........... • directly scanf or printf arrays printf (“......”, a);",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "19": {
      "text": "zero or a constant positive integer. •The array index must evaluate to an integer between 0 and n -1 where n is the number of elements in the array. 18 Department of CSE Don‟t Do‟s You cannot • use = to assign one array variable to another a = b; /* a and b are arrays */ • use == to directly compare array variables if (a = = b) ........... • directly scanf or printf arrays printf (“......”, a); 19 Department of CSE Illustrations Summing Elements in an array Use a variable named total to store the sum. Initially total is 0. Add each element in the array to total using a loop like this: double total = 0; for(inti= 0; i< ARRAY_SIZE; i++) { total += myList [i]; } 20 Department of CSE Finding Maximum in an array Use a variable named max to store the largest element. Initially max is myList [0]. T o find the largest element in the array myList , compare each element in myList with max, update max if the element is greater than max. double max = myList [0]; for(inti= 1; i< ARRAY_SIZE; i++) { if(myList [i] > max) max = myList [i]; } 21 Department of CSE Finding index of the largest element in the array double max = myList [0]; intindexOfMax = 0; for(inti= 1; i< ARRAY_SIZE; i++) { if(myList [i] > max) { max = myList [i]; indexOfMax = i; } } 22 Department of CSE Shifting Elements double temp = myList [0]; // Retain the first element // Shift elements left for(inti= 1; i< myList.length ; i++) { myList [i-1] = myList [i]; } // Move the first element to fill in the last position myList [myList.length -1] = temp; 23 Department of CSE Try it Yourself -Predict the output 1. #include < stdio.h > intmain() { intarr[5]; // Assume that base address of arris 2000 and size of integer // is 32 bit arr++; printf (\"%u\", arr); return 0; } (A) 2002 (B) 2004 (C) 2020 (D) lvalue required 24 Department of CSE Try it Yourself -Predict the output 2. What will be the output of the program ? #include< stdio.h > intmain() { inta[5] = {5, 1, 15, 20, 25}; inti, j, m; i= ++a[1]; j = a[1]++; m = a[ i++]; printf (\"%d, %d, %d\", i, j, m); return 0; } A. 2, 1, 15 B. 1, 2, 5 C. 3, 2, 15 D. 2, 3, 20 25 Department of CSE Try it Yourself -Predict the output 3. What is the output of the following program? intmain() { inti; intarr[5] = {0}; for (i= 0; i<= 5; i++) printf (\"%d \", arr[i]); return 0; } A. Compiler Error: Array index out of bound. B. The always prints 0 five times followed by garbage value C. The program always crashes. D. The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 26 Department of CSE Answers ---Predict",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "20": {
      "text": "the output 3. What is the output of the following program? intmain() { inti; intarr[5] = {0}; for (i= 0; i<= 5; i++) printf (\"%d \", arr[i]); return 0; } A. Compiler Error: Array index out of bound. B. The always prints 0 five times followed by garbage value C. The program always crashes. D. The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 26 Department of CSE Answers ---Predict the output 1. D) lvalue required Array name in C is implemented by a constant pointer. It is not possible to apply increment and decrement on constant types. 2. C) 3, 2, 15 Step 1 : inta[5] = {5, 1, 15, 20, 25}; The variable arris declared as an integer array with a size of 5 and it is initialized to a[0] = 5 , a[1] = 1 , a[2] = 15 , a[3] = 20 , a[4] = 25 . Step 2 : inti, j, m; The variable i,j,m are declared as an integer type. Step 3 : i= ++a[1]; becomes i= ++1; Hence i= 2and a[1] = 2 Step 4 : j = a[1]++; becomes j = 2++; Hence j = 2 and a[1] = 3 . Step 5 : m = a[ i++]; becomes m = a[2]; Hence m = 15 and iis incremented by 1( i++ means 2++ so i=3) Step 6 : printf (\"%d, %d, %d\", i, j, m); It prints the value of the variables i, j, m Hence the output of the program is 3, 2, 15 3. D)The program may print 0 five times followed by garbage value, or may crash if address (arr+5) is invalid. 27 Department of CSE Try it Yourself –Code debugging #include < stdio.h > #define MAXSIZE 10 void main() { intarray[MAXSIZE]; inti, num, negative_sum = 0; printf (\"Enter the value of N \\n\"); scanf (\"%d\", &num); printf (\"Enter %d numbers \\n\", num); for (i= 0; i< num; i++) { scanf (\"%d\", array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 28 Department of CSE Answers –Code Debugging #include < stdio.h > #define MAXSIZE 10 void main() { intarray[MAXSIZE]; inti, num, negative_sum = 0; printf (\"Enter the value of N \\n\"); scanf (\"%d\", &num); printf (\"Enter %d numbers \\n\", num); for (i= 0; i< num; i++) { scanf (\"%d\", &array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 29 Department of CSE Try it Yourself -Simple word problems To Print the Alternate Elements in an Array Array -NH- WP3.c Find 2 Elements in the Array such that Difference between them is Largest Array -NH-WP1.c To Sort",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "21": {
      "text": "scanf (\"%d\", &array[ i]); } /* Summation starts */ for (i= 0; i< num; i++) { if (array[ i] < 0) { negative_sum = negative_sum + array[ i]; } printf (\"\\n Sum of all negative numbers = %d \\n\", negative_sum ); } 29 Department of CSE Try it Yourself -Simple word problems To Print the Alternate Elements in an Array Array -NH- WP3.c Find 2 Elements in the Array such that Difference between them is Largest Array -NH-WP1.c To Sort the Array in an Ascending Order Array -NH-WP2.c 30 Department of CSE Multidimensional Arrays •C also allows an array to have more than one dimension. 31 Department of CSEFor example, a two -dimensional array consists of a certain number of rows and columns: constintNUMROWS = 3 ; constintNUMCOLS = 7 ; intArray[NUMROWS][NUMCOLS]; Array[2][5] 3rdvalue in 6thcolumn Array[0][4] 1stvalue in 5thcolumn The declaration must specify the number of rows and the number of columns, and both must be constants.0 1 2 3 4 5 6 0 418 9 3 -4 6 0 1 12 45 74 15 0 98 0 284 87 75 67 81 85 79 Starting from a given memory location, the elements are stored row -wise in consecutive memory locations. x: starting address of the array in memory c: number of columns k: number of bytes allocated per array element a[i][j] is allocated memory location at address x + ( i* c + j) * k 32 Department of CSE Multi Dimensional Array -Initialization Method 1 --Initialization at the time of declaration intArray1 [2][3] ={{1, 2, 3 },{4, 5, 6 }}; intArray2 [2][3] = { 1, 2, 3, 4, 5 }; intArray3 [2][3] = { {1, 2} , {4 } }; Rows of Array1: 1 2 34 5 6 Rows of Array2: 1 2 34 5 0 Rows of Array3: 1 2 04 0 0 33 Department of CSE Multi Dimensional Array -Initialization Method 2 –Setting values using loop (nested loop) intmain() { const intNUMROW = 3; const intNUMCOL = 7; intArray1[NUMROW][NUMCOL]; for (introw = 0; row < NUMROW; row++) { for (intcol= 0; col< NUMCOL; col++) { scanf (“%d”,&Array1[row][ col]; } } 34 Department of CSE Multidimensional Array –Accessing Elements 35 Department of CSE 0 1 2 3 4 0 7 0 1 2 3 4 1 2 3 4 0 1 2 3 4 matrix[2][1] = 7; matrix = new int[5][5]; 3 7 0 1 2 0 1 2 int[][] array = { {1, 2, 3}, {4, 5, 6 }, {7, 8, 9}, {10, 11, 12} }; 1 2 3 4 5 6 8 9 10 11 12 Multidimensional Array -Illustrations To add two matrix entered by the user and print it. #include< stdio.h > void main() { inta[3][3],b[3][3],c[3][3]; inti,j; printf (“enter the elements in both the array:”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&b [i][j]); } } for(i=0 ; i<3 ;",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "22": {
      "text": "}; 1 2 3 4 5 6 8 9 10 11 12 Multidimensional Array -Illustrations To add two matrix entered by the user and print it. #include< stdio.h > void main() { inta[3][3],b[3][3],c[3][3]; inti,j; printf (“enter the elements in both the array:”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&b [i][j]); } } for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { c[i][j]=a[ i][j]+b[ i][j]; printf (“%d”,c[i][j]); } printf (“n”); } } 36 Department of CSE Multidimensional Array -Illustrations To input a matrix and print its transpose. #include< stdio.h > #include< conio.h > void main() { inta[3][3],b[3][3]; inti,j; clrscr (); printf (“enter the elements in the array”); for(i=0 ; i<3 ; i++) { for(j=0 ; j<3 ; j++) { scanf (“%d”,&a [i][j]); } } for(j=0 ; i<3 ; i++) { for(i=0 ; j<3 ; j++) { printf (“%2d”,&b[j][ i]); } } getch (); } 37 Department of CSE Try it Yourself -Predict the output 1. #include < stdio.h > intmain() { inta[][] = {{1,2},{3,4}}; inti, j; for (i= 0; i< 2; i++) for (j = 0; j < 2; j++) printf (\"%d \", a[ i][j]); return 0; } A 1 2 3 4 B Compiler Error in line \" inta[][] = {{1,2},{3,4}};\" C 4 garbage values D 4 3 2 1 38 Department of CSE Try it Yourself -Predict the output 2. Consider the following declaration of a „two -dimensional array in C: char a[100][100]; Assuming that the main memory is byte -addressable and that the array is stored starting from memory address 0, the address of a[40][50] is…..? A. 4040 B. 4050 C. 5040 D. 5050 39 Department of CSE Answers –Predict the Output 1.Answer: (B) There is compilation error in the declaration inta[][] = {{1,2},{3,4}}; Except the first dimension, every other dimension must be specified. intarr[] = {5, 6, 7, 8} //valid intarr[][5] = {}; //valid intarr[][] = {}; //invalid intarr[][10][5] = {}; //valid intarr[][][5] = {}; //invalid 40 Department of CSE Answers –Predict the Output 2. Answer: (B) Address of a[40][50] = Base address + 40*100* element_size + 50*element_size = 0 + 4000*1 + 50*1 = 4050 41 Department of CSE Try it Yourself -Simple word problems To Check if a given Matrix is an Identity Matrix MDArray - NH-WP!.c To Calculate the Sum of the Elements of each Row & Column MDArray -NH-WP2.c 42 Department of CSE Common Programming Errors •It is important to note the difference between the “seventh element of the array” and “array element seven.” Because array subscripts begin at 0, the “seventh element of the array” has a subscript of 6, while “array element seven” has a subscript of 7 and is actually the eighth element of the array. This is a source of “ off-by-one” errors. •Forgetting to initialize the elements of an array whose elements should be initialized. •Providing more initializers in an array",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "23": {
      "text": "•It is important to note the difference between the “seventh element of the array” and “array element seven.” Because array subscripts begin at 0, the “seventh element of the array” has a subscript of 6, while “array element seven” has a subscript of 7 and is actually the eighth element of the array. This is a source of “ off-by-one” errors. •Forgetting to initialize the elements of an array whose elements should be initialized. •Providing more initializers in an array initializer list than there are elements in the array is a syntax error. •Ending a #define preprocessor directive with a semicolon . Remember that preprocessor directives are not C statements. 43 Department of CSE •Assigning a value to a symbolic constant in an executable statement is a syntax error. A symbolic constant is not a variable. No space is reserved for it by the compiler as with variables that hold values at execution time. •Not providing scanf with a character array large enough to store a string typed at the keyboard can result in destruction of data in a program and other runtime errors. This can also make a system susceptible to worm and virus attacks. •Referencing a double -subscripted array element as a[x,y] instead of a[x][y]. 44 Department of CSE Summary •The ability to use a single name to represent a collection of items and refer to an item by specifying the item number enables us to develop concise and efficient programs. •C allows arrays of more than one dimensions. •Exact limit is determined by the compiler 45 Department of CSE",
      "source": "unknown",
      "file": "2.1 Arrays (1).pdf"
    },
    "24": {
      "text": "Pointers What are pointers? Uses of pointers Pointer syntax Pointer operators Null Pointer Pointer to pointer Pointer arithmetic's Computer Science: A Structured Programming Approach Using C3FIGURE 9 -3Pointer Constants Computer Science: A Structured Programming Approach Using C4Pointer constants, drawn from the set of addresses for a computer, exist by themselves. We cannot change them; we can only use them. Note Computer Science: A Structured Programming Approach Using C5An address expression, one of the expression types in the unary expression category, consists of an ampersand (&) and a variable name . Note Computer Science: A Structured Programming Approach Using C6FIGURE 9 -4Print Character Addresses Computer Science: A Structured Programming Approach Using C7A variable’s address is the first byte occupied by the variable. Note Computer Science: A Structured Programming Approach Using C8FIGURE 9 -5Integer Constants and Variables Computer Science: A Structured Programming Approach Using C9FIGURE 9 -6Pointer Variable Let’s Start with Addresses Sample Code Output#include < stdio.h > intmain() { intvar= 5; printf (\"var: %d\\n\", var); printf (\"address of var: %p\", & var); return 0; } var: 5 address of var: 2686778•varisthevariable •&var will give theaddress of thevariable var •Aspecial variable thatcanstore address isapointer variable . %p %u –format specifiers What Are Pointers? A Place holder to hold the address of the memory location. -Address is also a number Hence, -Apointer is a variable whose value is the address of another variable.Memory Address Value 0x8004 …. 0x8008 1 0x800C … 0x8010 0x8008Variable A Address of variable A Uses Of Pointers They have a number of useful applications. ◦Enables us to access a variable that is defined outside the function. ◦Can be used to pass information back and forth between a function and its reference point. ◦More efficient in handling data tables. ◦Reduces the length and complexity of a program. ◦Also increases the execution speed. Pointer syntax Different ways to initialize a pointer variable int* p; int*p; (Here pis a pointer) int* p; int* p1, p2; (Here p1 is a pointer, p2is a normal variable) p = &a; (Assigning the pointer p with address of a) Contd … nRate = 10;intnRate ; pTonRate = &nRateint*pTonRate ; Description #Sample code Output void main() { inta = 6; int*p; p = &a; printf (\"Value at *p = %d \\n\",*p); printf (\"Address stored in p =%x \\n\", p); printf (\"Address of a =%p \\n\", &a); }Variable Initialization Pointer Variable Declaration pis a pointer Store address of ain pointer variable p &‘address of’ operatorValue at *p = 6 Address stored in p =aef13dd4 Address of a =aef13dd4 *is a the value at operator Note The value of acan be set using p- *p = 6 (after pointing p to &a) Pointer Operators & -“Address of operator” -Provides the address of the variable * -“De-referencing/indirection Operator” Or -“Value at Operator” -Accesses the memory location this pointer holds the address ofMemory Address Value 0x8004 …. 0x8008 1 0x800C … 0x8010 0x8008a p p = &a *p = ?*p = 1 Example EX -1 int* pc, c; c = 5;",
      "source": "unknown",
      "file": "Pointers_I.pdf"
    },
    "25": {
      "text": "*is a the value at operator Note The value of acan be set using p- *p = 6 (after pointing p to &a) Pointer Operators & -“Address of operator” -Provides the address of the variable * -“De-referencing/indirection Operator” Or -“Value at Operator” -Accesses the memory location this pointer holds the address ofMemory Address Value 0x8004 …. 0x8008 1 0x800C … 0x8010 0x8008a p p = &a *p = ?*p = 1 Example EX -1 int* pc, c; c = 5; pc = &c; c = 1; printf (\"%d\", c); printf (\"%d\", *pc); // Output: 1 // Output: 1 The value of c is set to 1. Since pc and the address of c is the same, *pc gives us 1.int* pc, c; c = 5; pc = &c; *pc = 1; printf (\"%d\", *pc); printf (\"%d\", c);// Output: 1 // Output: 1 The value of *pc is set to 1. Since pc and the address of c is the same, c gives us 1.•EX -2 Example #include < stdio.h > intmain() { int* pc, c; c = 22; printf (\"Address of c: %p \\n\", &c); printf (\"Value of c: %d \\n\\n\", c); pc = &c; printf (\"Address of pointer pc: %p \\n\", pc); printf (\"Content of pointer pc: %d \\n\\n\", *pc); c = 11; printf (\"Address of pointer pc: %p \\n\", pc); printf (\"Content of pointer pc: %d \\n\\n\", *pc); *pc = 2; printf (\"Address of c: %p \\n\", &c); printf (\"Value of c: %d \\n\\n\", c); return 0; }c pc 22c Address of c : 2686784 Value of c : 22 Address of pointer pc : 2686784 Content of pointer pc : 2211 Address of pointer pc : 2686784 Content of pointer pc : 112 Address of c : 2686784 Value of c : 2 Things to Remember •Pointer variables must always point to a data item of the same type . float x; int *p; : ➔will result in erroneous output p = &x; •Assigning an absolute address to a pointer variable is prohibited. int*count; : count = 1268; •Once a pointer has been assigned the address of a variable, the value of the variable can be accessed using the indirection operator (*). inta, b; int*p; : p = &a; b = *p; // here b=a NULL Pointer •If an exact address to be assigned to a pointer is not known then assign a NULL value. •This is done at the time of variable declaration. •A pointer that is assigned NULL is called a null pointer. •Example : - int*ptr= NULL (The value of ptris 0 ) Pointer to Pointer intnum = 123 int*pr2; int**pr1; pr2 = & num pr1 = &pr2Pointer to pointer is a chain of pointers. It is declared using an extra ‘*’. int**var; Example #include < stdio.h > intmain () { intvar; int*ptr; int**pptr; var= 3 ; ptr= &var; pptr= &ptr; printf (\"Value of var= %d \\n\", var); printf (\"Value available at * ptr= %d \\n\", * ptr); printf (\"Value available at ** pptr=",
      "source": "unknown",
      "file": "Pointers_I.pdf"
    },
    "26": {
      "text": "- int*ptr= NULL (The value of ptris 0 ) Pointer to Pointer intnum = 123 int*pr2; int**pr1; pr2 = & num pr1 = &pr2Pointer to pointer is a chain of pointers. It is declared using an extra ‘*’. int**var; Example #include < stdio.h > intmain () { intvar; int*ptr; int**pptr; var= 3 ; ptr= &var; pptr= &ptr; printf (\"Value of var= %d \\n\", var); printf (\"Value available at * ptr= %d \\n\", * ptr); printf (\"Value available at ** pptr= %d \\n\", ** pptr); return 0; }Sample Code var ptr pptr 3 100 200 Value of var= 3 Value available at * ptr=3 Value available at ** pptr=3Output*ptr **pptrLet 100 be the address of var Let 200 be the address of ptr 100 200 address Pointer Arithmetic •As pointer’s are numbers arithmetic operations can be performed. •The four arithmetic operations are: ++, --, +, and – •Incrementing/ Decrementing operator • –Add/subtract an integer to a pointer to point to a different location •What are not allowed? •Adding two pointers. p1 = p1 + p2 ; •Multiply / divide a pointer in an expression. p1 = p2 / 5 ; p1 = p1 –p2 * 10 ; Contd … •We have seen that an integer value can be added to or subtracted from a pointer variable. int *p1, *p2 ; int i, j; : p1 = p1 + 1 ; p2 = p1 + j ; p2++ ; p2 = p2 –(i+ j) ; •In reality, it is not the integer value which is added/subtracted, but rather the scale factor times the value. Data Type Scale Factor char 1 int 4 float 4 double 8 If p1 is an integer pointer, then p1++ will increment the value of p1 by 4.Address p1 p1++p1 is a integer pointer Note that only integral values can be added or subtracted from a pointer. We can also subtract or compare two pointers of same type. Example Sample Code #include < stdio.h > intmain() { float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5}; float *ptr1 = & arr[0]; float *ptr2 = ptr1 + 3; printf (\"%d\", ptr2 -ptr1); return 0; }•Generally if an integer value ‘x’ is added to pointer ‘p’ then resultant value is p+ x*( sizeof (p)). •If ptris 100, then ptr2 = 100 + 3*(4) = 112, and hence address belongs to arr[3]. •ptr2 –ptr1 = (ptr1+3 –ptr1) = 3 (which basically means no. of elements between ptr2 and ptr1)Explanation Output 3 Question -1 What is the output ? void main() { float a=6, *p; p = &a; printf (“%f”,*p); }A)6 B)Error C)Garbage value D)None of the aboveSample Code Options D) None of the above Beacause *p points to a float value , the output will be 6.000000Solution Question -2 What is the output ? void main() { inta=6, *p; p = &a; printf (“%d”,*(&a)); }A)6 B)Error C)Garbage value D)None of the aboveSample Code Options A) 6 First the address of ‘ a’ is taken then the value present in there is printed",
      "source": "unknown",
      "file": "Pointers_I.pdf"
    },
    "27": {
      "text": "a=6, *p; p = &a; printf (“%f”,*p); }A)6 B)Error C)Garbage value D)None of the aboveSample Code Options D) None of the above Beacause *p points to a float value , the output will be 6.000000Solution Question -2 What is the output ? void main() { inta=6, *p; p = &a; printf (“%d”,*(&a)); }A)6 B)Error C)Garbage value D)None of the aboveSample Code Options A) 6 First the address of ‘ a’ is taken then the value present in there is printed Solution Question -3 What is the output ? void main() { inta=6,*p; p = &a; printf (\"%d\",**(&p)); }A)6 B)Error C)Garbage value D)None of the aboveSample Code Options A)6 &(*p) will point to p and *p will point to a that is 6Solution Question -4 What is the output ? #include < stdio.h > void main() { inta=6,*p; printf (\"%d\",*p); }A)6 B)Address of ‘a’ C)Error D)None of the aboveSample Code Options D) None of the above Gives Segmentation fault , because as p is not initialized it gives a segementation faultSolution Question -5 What is the output ? #include < stdio.h > void main() { inta = NULL,*c=NULL; c = &a; printf (\"%d\",*c); }A)0 B)Error C)Garbage value D)None of the aboveSample Code Options A) 0 The integer equivalent of NULL is 0Solution Question -6 What is the output ? #include < stdio.h > void main() { inta=6,*d, *c; d = &a; c = d; printf (\"%d\",*c); printf (\"%d\",*d); }A)6 6 B)Error C)Garbage value D)None of the aboveSample Code Options A)6 6 Using the assignment operator to initiate the pointer will not change the working of the pointerSolution Question -7 What is the output ? #include < stdio.h > void main() { inta=2, b=4,*c,*d; c = &a; d = &b; d = c; printf (\"%d\",*c); printf (\"%d\",*d); }A)2 2 B)Error C)Garbage value D)None of the aboveSample Code Options A)2 2 Updating the pointer to a new location will change it completely to a new memory location. So both ‘c’and ‘d’ points to ‘a’ .Solution Question -8 What is the output ? intmain() { int*ptr; intx; ptr= &x; *ptr= 0; printf (\" x = % dn\", x); printf (\" *ptr= %dn\", *ptr); *ptr+= 5; printf (\" x = % dn\", x); printf (\" *ptr= %dn\", *ptr); (*ptr)++; printf (\" x = % dn\", x); printf (\" *ptr= %dn\", *ptr); return 0; }Sample Code x = 0 *ptr = 0 x = 5 *ptr = 5 x = 6 *ptr = 6Solution",
      "source": "unknown",
      "file": "Pointers_I.pdf"
    }
  }
}